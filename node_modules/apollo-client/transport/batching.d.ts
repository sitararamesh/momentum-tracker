/// <reference types="typed-graphql" />
import { Request } from './networkInterface';
import { GraphQLResult } from 'graphql';
export interface QueryFetchRequest {
    request: Request;
    promise?: Promise<GraphQLResult>;
    resolve?: (result: GraphQLResult) => void;
    reject?: (error: Error) => void;
}
export declare class QueryBatcher {
    queuedRequests: QueryFetchRequest[];
    private pollInterval;
    private pollTimer;
    private batchFetchFunction;
    constructor({batchFetchFunction}: {
        batchFetchFunction: (request: Request[]) => Promise<GraphQLResult[]>;
    });
    enqueueRequest(request: Request): Promise<GraphQLResult>;
    consumeQueue(): Promise<GraphQLResult>[] | undefined;
    start(pollInterval: Number): void;
    stop(): void;
}
