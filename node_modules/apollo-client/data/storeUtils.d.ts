/// <reference types="typed-graphql" />
import { Field, InlineFragment, Selection, GraphQLResult } from 'graphql';
export declare function storeKeyNameFromField(field: Field, variables?: Object): string;
export declare function storeKeyNameFromFieldNameAndArgs(fieldName: string, args?: Object): string;
export declare function resultKeyNameFromField(field: Field): string;
export declare function isField(selection: Selection): selection is Field;
export declare function isInlineFragment(selection: Selection): selection is InlineFragment;
export declare function graphQLResultHasError(result: GraphQLResult): number;
export interface NormalizedCache {
    [dataId: string]: StoreObject;
}
export interface StoreObject {
    __typename?: string;
    [storeFieldKey: string]: StoreValue;
}
export interface IdValue {
    type: 'id';
    id: string;
    generated: boolean;
}
export interface JsonValue {
    type: 'json';
    json: any;
}
export declare type StoreValue = number | string | string[] | IdValue | JsonValue | void;
export declare function isIdValue(idObject: StoreValue): idObject is IdValue;
export declare function toIdValue(id: string, generated?: boolean): IdValue;
export declare function isJsonValue(jsonObject: StoreValue): jsonObject is JsonValue;
